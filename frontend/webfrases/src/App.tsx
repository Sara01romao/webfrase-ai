
import { useEffect, useState } from 'react'
import './App.css'
import { dates} from './data/dateList';


interface GeneratedText {
  generated_text: string; 
}

function App() {

  const [phrase, setPhrase] = useState<GeneratedText[]>([])
  const [nameDate, setNameDate] =useState<string>('');
  const [activeButton, setActiveButton] = useState(null);
  

    useEffect(() => {
      if (nameDate) {
        loadtxt();
      }
    }, [nameDate]);


    async function loadtxt() {
      try {
        if(nameDate){

          
          const data = {
            inputs: `Escreva uma frase breve e impactante para comemorar ${nameDate} nas redes sociais.`,
            parameters: { max_new_tokens: 50 },
          };

          const response = await fetch("http://localhost:3000/phrasetxt", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

        
          const result = await response.json();
          console.log(result); 


          setPhrase(result)

        }
      } catch (error) {
        console.error("Erro", error); 
      }
    
      console.table(phrase[0].generated_text
      )
    }

  //limpa resultado
  const cleanText = (text: string) => {
    const match = text.match(/"(.*?)"/);
    return match ? match[1] : text;  
};


  function handleCreate(name:string){
    setNameDate(name);
  }

  function handleClean(){
    setPhrase([])
    setActiveButton(null)
  }

  function handleFilter(idBtn:any, dataNome: string){
     setActiveButton(idBtn);
     setNameDate(dataNome);
  }

  return (
  
    <div className='container'>

     <header>
        <svg width="161" height="58" viewBox="0 0 161 58" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M5.44602 57L0.451705 39.5455H4.48295L7.37216 51.6733H7.51705L10.7045 39.5455H14.1562L17.3352 51.6989H17.4886L20.3778 39.5455H24.4091L19.4148 57H15.8182L12.4943 45.5881H12.358L9.04261 57H5.44602ZM30.8757 57.2557C29.5291 57.2557 28.37 56.983 27.3984 56.4375C26.4325 55.8864 25.6882 55.108 25.1655 54.1023C24.6428 53.0909 24.3814 51.8949 24.3814 50.5142C24.3814 49.1676 24.6428 47.9858 25.1655 46.9688C25.6882 45.9517 26.424 45.1591 27.3729 44.5909C28.3274 44.0227 29.4467 43.7386 30.7308 43.7386C31.5945 43.7386 32.3984 43.8778 33.1428 44.1562C33.8928 44.429 34.5462 44.8409 35.103 45.392C35.6655 45.9432 36.103 46.6364 36.4155 47.4716C36.728 48.3011 36.8842 49.2727 36.8842 50.3864V51.3835H25.8303V49.1335H33.4666C33.4666 48.6108 33.353 48.1477 33.1257 47.7443C32.8984 47.3409 32.5831 47.0256 32.1797 46.7983C31.782 46.5653 31.3189 46.4489 30.7905 46.4489C30.2393 46.4489 29.7507 46.5767 29.3246 46.8324C28.9041 47.0824 28.5746 47.4205 28.3359 47.8466C28.0973 48.267 27.9751 48.7358 27.9695 49.2528V51.392C27.9695 52.0398 28.0888 52.5994 28.3274 53.071C28.5717 53.5426 28.9155 53.9062 29.3587 54.1619C29.8018 54.4176 30.3274 54.5455 30.9354 54.5455C31.3388 54.5455 31.7081 54.4886 32.0433 54.375C32.3786 54.2614 32.6655 54.0909 32.9041 53.8636C33.1428 53.6364 33.3246 53.358 33.4496 53.0284L36.8075 53.25C36.6371 54.0568 36.2876 54.7614 35.7592 55.3636C35.2365 55.9602 34.5604 56.4261 33.7308 56.7614C32.907 57.0909 31.9553 57.2557 30.8757 57.2557ZM39.3217 57V39.5455H42.9524V46.108H43.0632C43.2223 45.7557 43.4524 45.3977 43.7536 45.0341C44.0604 44.6648 44.4581 44.358 44.9467 44.1136C45.4411 43.8636 46.0547 43.7386 46.7876 43.7386C47.7422 43.7386 48.6229 43.9886 49.4297 44.4886C50.2365 44.983 50.8814 45.7301 51.3643 46.7301C51.8473 47.7244 52.0888 48.9716 52.0888 50.4716C52.0888 51.9318 51.853 53.1648 51.3814 54.1705C50.9155 55.1705 50.2791 55.929 49.4723 56.446C48.6712 56.9574 47.7734 57.2131 46.7791 57.2131C46.0746 57.2131 45.4751 57.0966 44.9808 56.8636C44.4922 56.6307 44.0916 56.3381 43.7791 55.9858C43.4666 55.6278 43.228 55.267 43.0632 54.9034H42.9013V57H39.3217ZM42.8757 50.4545C42.8757 51.233 42.9837 51.9119 43.1996 52.4915C43.4155 53.071 43.728 53.5227 44.1371 53.8466C44.5462 54.1648 45.0433 54.3239 45.6286 54.3239C46.2195 54.3239 46.7195 54.1619 47.1286 53.8381C47.5376 53.5085 47.8473 53.054 48.0575 52.4744C48.2734 51.8892 48.3814 51.2159 48.3814 50.4545C48.3814 49.6989 48.2763 49.0341 48.0661 48.4602C47.8558 47.8864 47.5462 47.4375 47.1371 47.1136C46.728 46.7898 46.2251 46.6278 45.6286 46.6278C45.0376 46.6278 44.5376 46.7841 44.1286 47.0966C43.7251 47.4091 43.4155 47.8523 43.1996 48.4261C42.9837 49 42.8757 49.6761 42.8757 50.4545ZM54.5795 57V39.5455H66.1364V42.5881H58.2699V46.7472H65.3693V49.7898H58.2699V57H54.5795ZM68.3395 57V43.9091H71.8594V46.1932H71.9957C72.2344 45.3807 72.6349 44.767 73.1974 44.3523C73.7599 43.9318 74.4077 43.7216 75.1406 43.7216C75.3224 43.7216 75.5185 43.733 75.7287 43.7557C75.9389 43.7784 76.1236 43.8097 76.2827 43.8494V47.071C76.1122 47.0199 75.8764 46.9744 75.5753 46.9347C75.2741 46.8949 74.9986 46.875 74.7486 46.875C74.2145 46.875 73.7372 46.9915 73.3168 47.2244C72.902 47.4517 72.5724 47.7699 72.3281 48.179C72.0895 48.5881 71.9702 49.0597 71.9702 49.5938V57H68.3395ZM81.5178 57.2472C80.6825 57.2472 79.9382 57.1023 79.2848 56.8125C78.6314 56.517 78.1143 56.0824 77.7337 55.5085C77.3587 54.929 77.1712 54.2074 77.1712 53.3438C77.1712 52.6165 77.3047 52.0057 77.5717 51.5114C77.8388 51.017 78.2024 50.6193 78.6626 50.3182C79.1229 50.017 79.6456 49.7898 80.2308 49.6364C80.8217 49.483 81.4411 49.375 82.0888 49.3125C82.8501 49.233 83.4638 49.1591 83.9297 49.0909C84.3956 49.017 84.7337 48.9091 84.9439 48.767C85.1541 48.625 85.2592 48.4148 85.2592 48.1364V48.0852C85.2592 47.5455 85.0888 47.1278 84.7479 46.8324C84.4126 46.5369 83.9354 46.3892 83.3161 46.3892C82.6626 46.3892 82.1428 46.5341 81.7564 46.8239C81.37 47.108 81.1143 47.4659 80.9893 47.8977L77.6314 47.625C77.8018 46.8295 78.1371 46.142 78.6371 45.5625C79.1371 44.9773 79.782 44.5284 80.5717 44.2159C81.3672 43.8977 82.2876 43.7386 83.3331 43.7386C84.0604 43.7386 84.7564 43.8239 85.4212 43.9943C86.0916 44.1648 86.6854 44.429 87.2024 44.7869C87.7251 45.1449 88.1371 45.6051 88.4382 46.1676C88.7393 46.7244 88.8899 47.392 88.8899 48.1705V57H85.4467V55.1847H85.3445C85.1342 55.5938 84.853 55.9545 84.5007 56.267C84.1484 56.5739 83.7251 56.8153 83.2308 56.9915C82.7365 57.1619 82.1655 57.2472 81.5178 57.2472ZM82.5575 54.7415C83.0916 54.7415 83.5632 54.6364 83.9723 54.4261C84.3814 54.2102 84.7024 53.9205 84.9354 53.5568C85.1683 53.1932 85.2848 52.7812 85.2848 52.321V50.9318C85.1712 51.0057 85.0149 51.0739 84.8161 51.1364C84.6229 51.1932 84.4041 51.2472 84.1598 51.2983C83.9155 51.3437 83.6712 51.3864 83.4268 51.4261C83.1825 51.4602 82.9609 51.4915 82.7621 51.5199C82.3359 51.5824 81.9638 51.6818 81.6456 51.8182C81.3274 51.9545 81.0803 52.1392 80.9041 52.3722C80.728 52.5994 80.6399 52.8835 80.6399 53.2244C80.6399 53.7188 80.8189 54.0966 81.1768 54.358C81.5405 54.6136 82.0007 54.7415 82.5575 54.7415ZM102.599 47.642L99.2749 47.8466C99.218 47.5625 99.0959 47.3068 98.9084 47.0795C98.7209 46.8466 98.4737 46.6619 98.1669 46.5256C97.8658 46.3835 97.505 46.3125 97.0845 46.3125C96.522 46.3125 96.0476 46.4318 95.6612 46.6705C95.2749 46.9034 95.0817 47.2159 95.0817 47.608C95.0817 47.9205 95.2067 48.1847 95.4567 48.4006C95.7067 48.6165 96.1357 48.7898 96.7436 48.9205L99.1129 49.3977C100.386 49.6591 101.335 50.0795 101.96 50.6591C102.585 51.2386 102.897 52 102.897 52.9432C102.897 53.8011 102.644 54.554 102.138 55.2017C101.638 55.8494 100.951 56.3551 100.076 56.7188C99.2067 57.0767 98.2038 57.2557 97.0675 57.2557C95.3345 57.2557 93.9538 56.8949 92.9254 56.1733C91.9027 55.446 91.3033 54.4574 91.1271 53.2074L94.6982 53.0199C94.8061 53.5483 95.0675 53.9517 95.4822 54.2301C95.897 54.5028 96.4283 54.6392 97.076 54.6392C97.7124 54.6392 98.2237 54.517 98.6101 54.2727C99.0021 54.0227 99.201 53.7017 99.2067 53.3097C99.201 52.9801 99.0618 52.7102 98.7891 52.5C98.5163 52.2841 98.0959 52.1193 97.5277 52.0057L95.2607 51.554C93.9822 51.2983 93.0305 50.8551 92.4055 50.2244C91.7862 49.5937 91.4766 48.7898 91.4766 47.8125C91.4766 46.9716 91.7038 46.2472 92.1584 45.6392C92.6186 45.0312 93.2635 44.5625 94.093 44.233C94.9283 43.9034 95.9055 43.7386 97.0249 43.7386C98.6783 43.7386 99.9794 44.0881 100.928 44.7869C101.883 45.4858 102.44 46.4375 102.599 47.642ZM111.149 57.2557C109.803 57.2557 108.643 56.983 107.672 56.4375C106.706 55.8864 105.962 55.108 105.439 54.1023C104.916 53.0909 104.655 51.8949 104.655 50.5142C104.655 49.1676 104.916 47.9858 105.439 46.9688C105.962 45.9517 106.697 45.1591 107.646 44.5909C108.601 44.0227 109.72 43.7386 111.004 43.7386C111.868 43.7386 112.672 43.8778 113.416 44.1562C114.166 44.429 114.82 44.8409 115.376 45.392C115.939 45.9432 116.376 46.6364 116.689 47.4716C117.001 48.3011 117.158 49.2727 117.158 50.3864V51.3835H106.104V49.1335H113.74C113.74 48.6108 113.626 48.1477 113.399 47.7443C113.172 47.3409 112.857 47.0256 112.453 46.7983C112.055 46.5653 111.592 46.4489 111.064 46.4489C110.513 46.4489 110.024 46.5767 109.598 46.8324C109.178 47.0824 108.848 47.4205 108.609 47.8466C108.371 48.267 108.249 48.7358 108.243 49.2528V51.392C108.243 52.0398 108.362 52.5994 108.601 53.071C108.845 53.5426 109.189 53.9062 109.632 54.1619C110.075 54.4176 110.601 54.5455 111.209 54.5455C111.612 54.5455 111.982 54.4886 112.317 54.375C112.652 54.2614 112.939 54.0909 113.178 53.8636C113.416 53.6364 113.598 53.358 113.723 53.0284L117.081 53.25C116.911 54.0568 116.561 54.7614 116.033 55.3636C115.51 55.9602 114.834 56.4261 114.004 56.7614C113.18 57.0909 112.229 57.2557 111.149 57.2557ZM130.419 47.642L127.095 47.8466C127.038 47.5625 126.916 47.3068 126.729 47.0795C126.541 46.8466 126.294 46.6619 125.987 46.5256C125.686 46.3835 125.325 46.3125 124.905 46.3125C124.342 46.3125 123.868 46.4318 123.482 46.6705C123.095 46.9034 122.902 47.2159 122.902 47.608C122.902 47.9205 123.027 48.1847 123.277 48.4006C123.527 48.6165 123.956 48.7898 124.564 48.9205L126.933 49.3977C128.206 49.6591 129.155 50.0795 129.78 50.6591C130.405 51.2386 130.717 52 130.717 52.9432C130.717 53.8011 130.464 54.554 129.959 55.2017C129.459 55.8494 128.771 56.3551 127.896 56.7188C127.027 57.0767 126.024 57.2557 124.888 57.2557C123.155 57.2557 121.774 56.8949 120.746 56.1733C119.723 55.446 119.124 54.4574 118.947 53.2074L122.518 53.0199C122.626 53.5483 122.888 53.9517 123.303 54.2301C123.717 54.5028 124.249 54.6392 124.896 54.6392C125.533 54.6392 126.044 54.517 126.43 54.2727C126.822 54.0227 127.021 53.7017 127.027 53.3097C127.021 52.9801 126.882 52.7102 126.609 52.5C126.337 52.2841 125.916 52.1193 125.348 52.0057L123.081 51.554C121.803 51.2983 120.851 50.8551 120.226 50.2244C119.607 49.5937 119.297 48.7898 119.297 47.8125C119.297 46.9716 119.524 46.2472 119.979 45.6392C120.439 45.0312 121.084 44.5625 121.913 44.233C122.749 43.9034 123.726 43.7386 124.845 43.7386C126.499 43.7386 127.8 44.0881 128.749 44.7869C129.703 45.4858 130.26 46.4375 130.419 47.642ZM141.635 57H137.68L143.706 39.5455H148.462L154.479 57H150.524L146.152 43.5341H146.016L141.635 57ZM141.388 50.1392H150.729V53.0199H141.388V50.1392ZM160.27 39.5455V57H156.58V39.5455H160.27Z" fill="black"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M87.7917 2.07692H90.9167C91.4692 2.07692 91.9991 2.29574 92.3898 2.68524C92.7805 3.07474 93 3.60301 93 4.15385V24.9231C93 25.4739 92.7805 26.0022 92.3898 26.3917C91.9991 26.7812 91.4692 27 90.9167 27H70.0833C69.5308 27 69.0009 26.7812 68.6102 26.3917C68.2195 26.0022 68 25.4739 68 24.9231V4.15385C68 3.60301 68.2195 3.07474 68.6102 2.68524C69.0009 2.29574 69.5308 2.07692 70.0833 2.07692H73.2083V1.03846C73.2083 0.763044 73.3181 0.498908 73.5134 0.304158C73.7088 0.109409 73.9737 0 74.25 0C74.5263 0 74.7912 0.109409 74.9866 0.304158C75.1819 0.498908 75.2917 0.763044 75.2917 1.03846V2.07692H85.7083V1.03846C85.7083 0.763044 85.8181 0.498908 86.0134 0.304158C86.2088 0.109409 86.4737 0 86.75 0C87.0263 0 87.2912 0.109409 87.4866 0.304158C87.6819 0.498908 87.7917 0.763044 87.7917 1.03846V2.07692ZM73.2083 5.19231V4.15385H70.0833V8.30769H90.9167V4.15385H87.7917V5.19231C87.7917 5.46773 87.6819 5.73186 87.4866 5.92661C87.2912 6.12136 87.0263 6.23077 86.75 6.23077C86.4737 6.23077 86.2088 6.12136 86.0134 5.92661C85.8181 5.73186 85.7083 5.46773 85.7083 5.19231V4.15385H75.2917V5.19231C75.2917 5.46773 75.1819 5.73186 74.9866 5.92661C74.7912 6.12136 74.5263 6.23077 74.25 6.23077C73.9737 6.23077 73.7088 6.12136 73.5134 5.92661C73.3181 5.73186 73.2083 5.46773 73.2083 5.19231ZM70.0833 24.9231H90.9167V10.3846H70.0833V24.9231Z" fill="black"/>
          <path d="M85.9245 13.8038C86.0213 13.9002 86.0982 14.0147 86.1506 14.1408C86.203 14.2669 86.23 14.402 86.23 14.5385C86.23 14.6749 86.203 14.8101 86.1506 14.9361C86.0982 15.0622 86.0213 15.1767 85.9245 15.2732L79.6745 21.5039C79.5777 21.6005 79.4629 21.6771 79.3364 21.7294C79.2099 21.7816 79.0744 21.8085 78.9375 21.8085C78.8006 21.8085 78.6651 21.7816 78.5386 21.7294C78.4121 21.6771 78.2973 21.6005 78.2005 21.5039L75.0755 18.3886C74.8801 18.1937 74.7703 17.9294 74.7703 17.6538C74.7703 17.3783 74.8801 17.114 75.0755 16.9191C75.271 16.7243 75.5361 16.6148 75.8125 16.6148C76.0889 16.6148 76.354 16.7243 76.5495 16.9191L78.9375 19.3011L84.4505 13.8038C84.5473 13.7072 84.6621 13.6306 84.7886 13.5783C84.9151 13.5261 85.0506 13.4992 85.1875 13.4992C85.3244 13.4992 85.4599 13.5261 85.5864 13.5783C85.7129 13.6306 85.8277 13.7072 85.9245 13.8038Z" fill="#FF6C47"/>
        </svg>


     </header>


     
     
    <main className='mainHome'>
       <div className='phraseContainer'>

          <h1>Dia 31/out se comemora o Halloween!</h1>

          <div className='phraseContain'>

                <div className='filter'>

                {dates.map((mes) => (
                    <div key={mes.id}>
                      <p>
                        <strong>{mes.nameMonth}</strong>
                      </p>
                      <div>
                        <ul>
                          {mes.dates.map((data) => (
                            <li key={data.id}>
                              <button
                                className={activeButton === data.id ? 'active' : ''}
                                onClick={() => handleFilter(data.id, data.nameDate)}
                              >
                                {data.nameDate}
                              </button>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  ))}

                 

                </div>
          
                <div className='txtPhrase'>
                    {phrase.length === 0 ? 
                      <div className='txtPhraseContainer'>
                        <p>Clique abaixo para gerar uma frase para suas redes sociais!</p>
                        <button onClick={() => handleCreate('halloween')} className='btn create'>Gerar Frase</button>
                      </div>
                      
                      : <div className='txtPhraseContainer'>
                          {phrase.map((item, index) => (
                              <p key={index}>{cleanText(item.generated_text)}</p> 
                          ))}
                          
                          <div className='btnPhraseContainer'>
                  
                            <button onClick={handleClean}>Limpar</button>
                          </div>
                        </div> 
                    }
                    
              </div>
          </div>

         
       

       </div>


    </main>

      
     
    </div>
  )
}

export default App
